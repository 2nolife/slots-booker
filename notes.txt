==========================================
Slots Booker - The flexible booking system
Inception:   27 Aug 2016 by Sergei Abramov
==========================================


Model diagram
=============
  Profile
  |
  +-- Properties (username, email, etc)
  +-- Metadata (arbitrary json) - deprecated due to attributes
  +-- Attributes (permitted for user)

  Token
  |
  +-- Properties (token, expires, etc)

  Place
  |
  +-- Address
  +-- Properties (name, address, etc)
  +-- Attributes (permitted for moderator)
  |
  +-- Space (array of Spaces)
  +-- Space <--+ (same as)
      |        |
      +--- Space (array of inner Spaces)
      +--- Space
      |    |
      |    +-- Properties (name etc)
      |    +-- Attributes (permitted for moderator)
      |
      +-- Price (array of Prices)
      +-- Price
      |   |
      |   +-- Properties (name, amount, etc)
      |   +-- Attributes (permitted for moderator)
      |
      +-- Metadata (arbitrary json) - deprecated due to attributes

  Slot (linked to a space by space_id)
  |
  +-- Properties (name, etc)
  +-- Attributes (permitted for moderator)
  |
  +-- Price (array of Prices)
  +-- Price
  |   |
  |   +-- Properties (name, amount, etc)
  |   +-- Attributes (permitted for moderator)
  |
  +-- Booking (array of Bookings)
  +-- Booking
  |   |
  |   +-- Properties (status, etc)
  |   +-- Attributes (permitted for moderator and booker)
  |
  +-- Booked

  * Booking status property
    0 - inactive/cancelled
    1 - active
    2 - is being booked

  * book_status property
    0 - bookable
    1 - booked
    2 - is being booked
    3 - is being released (goes to bookable)

  Booked (maps slots with bookings)
  |
  +-- Properties (status, paid,etc)
  +-- booking_ids (array of booking IDs)
  +-- slot_ids (array of slots IDs)

  * status property
    1 - is being booked
    2 - booked
    3 - conflict/failed

  * paid property (initially set when quote Reference created)
    false - reference unpaid or due payment
    true - reference paid

  Quote
  |
  +-- Properties (deal, status, etc)
  +-- SlotPrice (array of SlotPrices)
  +-- SlotPrice
      |
      +-- Properties (name, amount, etc)

  * status property
    0 - inactive
    1 - complete
    2 - pending payment (from user)
    3 - not paid

  * deal property
    true  - package deal or discount was applied, bookings may only be cancelled all at once
    false - individual bookings may be cancelled without affecting the others

  Refund
  |
  +-- Properties (status, etc)
  +-- SlotPrice (array of SlotPrices)
  +-- SlotPrice
      |
      +-- Properties (name, amount, etc)

  * status property
    0 - inactive
    1 - complete
    2 - pending payment (to user)

  Reference (maps quotes and refunds to bookings)
  |
  +-- Properties (ref, etc)
  +-- Quote  \__ one or the other
  +-- Refund /


Attributes
==========
  1. keys and permissions defined through configuration
  2. permissions:
        r - readable by object owner
        w - writeable by object owner
        p - public, readable by anyone
        o - write once (applies to: booking, cannot be overwritten by booker)
        eg. first_name pw, cancel_reason ro, client_key p
  3. admin or system can add/read/write/delete any attribute
  4. value validation (regex) may be added later


Booking process (simplified, successful flow)
=============================================
   o
  -|-                 [Booking MS]            [Slots MS]
  / \                       |                      |
   |   POST slots A B       |   POST  booked       |
   | ---------------------> | -------------------> | (create Booked)      POST  /slots/booked               (status: 1)
   |                        |   PATCH slot A       |
   |                        | -------------------> | (reserve Slot A)     PATCH /slots/{id}/hold            (book_status: 2)
   |                        |   PATCH slot B       |
   |                        | -------------------> | (reserve Slot B)     PATCH /slots/{id}/hold            (book_status: 2)
   |                        |   POST  booking      |
   |                        | -------------------> | (create Booking A)   POST  /slots/{id}/bookings        (status: 2)
   |                        |   POST  booking      |
   |                        | -------------------> | (create Booking B)   POST  /slots/{id}/bookings        (status: 2)
   |                        |   PATCH booked       |
   |                        | -------------------> | (update Booked)      PATCH /slots/booked/{id}          (status: 2)
   |                        |   PATCH slot A       |
   |                        | -------------------> | (confirm Slot A)     PATCH /slots/{id}/hold            (book_status: 1)
   |                        |   PATCH slot B       |
   |                        | -------------------> | (confirm Slot B)     PATCH /slots/{id}/hold            (book_status: 1)
   |                        |   PATCH booking A    |
   |                        | -------------------> | (update Booking A)   PATCH /slots/{id}/bookings/{id}   (status: 1)
   |                        |   PATCH booking B    |
   |   201                  | -------------------> | (update Booking B)   PATCH /slots/{id}/bookings/{id}   (status: 1)
   | <--------------------- |                      |

Booking process:
  1. the user requests a Quote for selected slots, a new Quote is saved to the database
  2. the user books the selected slots:
    a) the Quote is found in the database
    b) the booking process goes as pictured
    c) a new Reference is saved to the database
  3. if the Quote require payment, the user initiates the Payment MS

  Note:
    If slots require payment, the user must request a new Quote (sees the amount to pay).
    If slots do not require payment, a Quote step may be omitted (it be created by MS).

Cancel process:
  1. the user requests a Refund for selected slots, a new Refund is saved to the database
  2. the user cancels the selected slots:
    a) the Refund is found in the database
    b) the cancel process goes (releasing the Slots and deactivating Bookings)
    c) a new Reference is saved to the database
  3. if the Refund require payment, the user initiates the Payment MS

  Note:
    The Quote(s) must exist in the database, whether paid or due payment.
    If the Quote was paid, the user must request a new Refund (sees the amount to refund).
    If the Quote was not paid, a Refund step may be omitted (it be created by MS).


T O D O
=======
Maximum bookings per day
Expiry actor every minute while no refs and then pull all refs one by one without delay
prm# attribute (expands to prm1, prm2 etc)
Login with facebook
Add client IP to the rest of the commands AND replies
Add generated X header to requests to help with tracking
See if weblet sets proper X-Forwarded-For header
Deployment diagram
Moderator should have no restrictions and can book slots on behalf of a user:
 a. paid slots without payment (special free price)
 b. slots with negative user balance (even if negative is disabled)
 c. slots of any member level for members and non-members
 d. slots not available for booking yet
 e. refund expired slots
 f. no maximum limit applied
Members search pagination
Refactor ?effective --> effective/prices /availability etc


Running in the background
=========================

NODE
  https://blog.nodejitsu.com/keep-a-nodejs-server-up-with-forever/
  npm install forever -g

  start:
    forever start -l weblet.log --append weblet.js
    tail -f  ~/.forever/weblet.log

  stop:
    forever list
    forever stop #process

SBT
  http://stackoverflow.com/questions/40643208/how-to-run-sbt-as-daemon
  FreeBSD/Mac/Unix make "setsid" command using "https://github.com/jerrykuch/ersatz-setsid"

  start:
    setsid nohup sbt run &
    tail -f hohup.out

  stop:
    ps -ax | grep sbt
    22326  -  Is      0:00.01 bash /usr/local/bin/sbt run
    22409  -  I       0:35.39 /usr/local/openjdk8/bin/java ... -jar /usr/local/share/sbt/sbt-launch.jar run
    kill 22326 22409
    "cat nohup.out" should read "Shutting down ..."

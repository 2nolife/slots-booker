akka {
  loggers  = [akka.event.slf4j.Slf4jLogger]
  loglevel = debug

  actor {
    debug {
      lifecycle = on
      receive = on
    }
  }
}

akka.actor.deployment {

  /global-external-auth/validate {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 10
  }

  "/global-external-auth/validate/*" {
    dispatcher = global-dispatcher
  }

  /global-external-auth/profile {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 10
  }

  "/global-external-auth/profile/*" {
    dispatcher = global-dispatcher
  }

  /ms-auth-token {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 5
  }

  "/ms-auth-token/*" {
    dispatcher = auth-dispatcher
  }

  /ms-auth-users {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 2
  }

  "/ms-auth-users/*" {
    dispatcher = auth-dispatcher
  }

  /ms-profiles {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 5
  }

  "/ms-profiles/*" {
    dispatcher = profiles-dispatcher
  }

  /ms-profiles-register {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 2
  }

  "/ms-profiles-register/*" {
    dispatcher = profiles-dispatcher
  }

  /ms-slots {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 5
  }

  "/ms-slots/*" {
    dispatcher = slots-dispatcher
  }

  /ms-places {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 5
  }

  "/ms-places/*" {
    dispatcher = places-dispatcher
  }

  /ms-booking {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 5
  }

  "/ms-booking/*" {
    dispatcher = booking-dispatcher
  }

  /ms-payments {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 5
  }

  "/ms-payments/*" {
    dispatcher = payments-dispatcher
  }

  /ms-payments-expired {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 2
  }

  "/ms-payments-expired/*" {
    dispatcher = payments-dispatcher
  }

  /ms-paypal-events {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 2
  }

  "/ms-paypal-events/*" {
    dispatcher = paypal-dispatcher
  }

  /ms-members {
    router = akka.routing.RoundRobinPool
    nr-of-instances = 5
  }

  "/ms-members/*" {
    dispatcher = members-dispatcher
  }

}

slotsbooker {

  mongodb_hostname = "localhost"
  mongodb_port = 27017
  mongodb_name = "slotsbooker"

  http_bind_hostname = "0.0.0.0"

  auth_base_url = "http://localhost:8022"
  profiles_base_url = "http://localhost:8021"
  places_base_url = "http://localhost:8024"
  slots_base_url = "http://localhost:8023"
  booking_base_url = "http://localhost:8025"
  payments_base_url = "http://localhost:8026"
  paypal_base_url = "http://localhost:8027"
  members_base_url = "http://localhost:8028"

  shared_system_token = "ChangeMe" // change

  rest_conn_per_route = 20
  rest_conn_max_total = 100

  anonymous_reads = true
  get_deep_fields = false
  sandbox_mode = true // must be "false" for LIVE env

  vo_attributes_profile: "first_name wp, last_name wp"
  vo_attributes_place: "prm0 wp, prm1 wp, client_key p, external_key wp, negative_balance wr, email wp, url wp, primary_number wp"
  vo_attributes_space: "prm0 wp, prm1 wp"
  vo_attributes_slot: "prm0 wp, prm1 wp"
  vo_attributes_booking: "ref p, cancel_ref p, price_id r, cancel_reason op"
  vo_attributes_price: "prm0 wp, prm1 wp"
  vo_attributes_currency_account: "paypal_env rwp, paypal_pkey rwp, paypal_skey rwp"

  ms-profiles {
    http_bind_port = 8021
  }

  ms-auth {
    http_bind_port = 8022
  }

  ms-slots {
    http_bind_port = 8023
  }

  ms-places {
    http_bind_port = 8024
  }

  ms-booking {
    http_bind_port = 8025
  }

  ms-payments {
    http_bind_port = 8026
  }

  ms-paypal {
    http_bind_port = 8027
    live_event_ip = "173.0.84.98, 64.4.250.33, 104.83.1.168"
  }

  ms-members {
    http_bind_port = 8028
  }

}

akka.http.server {
  remote-address-header = on

  idle-timeout = 5s
  request-timeout = 5s
  linger-timeout = 5s

  max-connections = 10
}

global-dispatcher {
  fork-join-executor {
    parallelism-min = 10
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

auth-dispatcher {
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

rest-auth-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 100
}

profiles-dispatcher {
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

rest-profiles-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 100
}

slots-dispatcher {
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

rest-slots-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 100
}

places-dispatcher {
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

rest-places-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 100
}

booking-dispatcher {
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

rest-booking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 100
}

payments-dispatcher {
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

rest-payments-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 100
}

paypal-dispatcher {
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

rest-paypal-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 100
}

members-dispatcher {
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  throughput = 1
}

rest-members-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 100
}
